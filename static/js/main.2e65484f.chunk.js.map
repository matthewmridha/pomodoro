{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["countdown","secondsLeft","defaultBreakTime","defaultSessionTime","defaultTimerLabel","stopped","timefy","sec","Math","floor","toString","slice","App","props","alarm","audio","document","getElementById","play","setTimeout","pause","currentTime","rollover","state","break","newTime","parseInt","sessionTime","displayNewTime","setState","timeLeft","tick","breakTime","seconds","then","Date","now","setInterval","round","clearInterval","result","String","title","handleIncrement","e","data","target","getAttribute","inputTime","outputTime","status","handleDecrement","handleReset","timerLabel","bind","handleStartStop","this","className","breakLength","sessionLength","React","Component","Break","id","onClick","data-type","Session","Timer","Controls","aria-hidden","sr-only","Audio","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e65484f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n///// CONSTANTS & VARIABLES /////\n\nconst defaultBreakTime = \"5\";\nconst defaultSessionTime = \"25\";\nconst defaultTimerLabel = \"Session\";\nconst stopped = \"stopped\";\nconst running = \"running\";\nconst paused = \"paused\";\n\n      \nlet countdown;\nlet secondsLeft;\n\n/* \nTakes argument of total seconds and converts\nto mm:ss format for clock display.\n*/\n\nconst timefy = ( sec ) => {\n    let minutes = ( \"00\" + ( Math.floor( sec / 60 )).toString()).slice( -2 );\n    let seconds = ( \"00\" + ( Math.floor( sec % 60 )).toString()).slice( -2 );\n    return ( minutes + \":\" + seconds )\n};\n\n///// COMPONENTS /////\n\n/*\nPomodromo App \n*/\n\nclass App extends React.Component {\n  constructor( props ) {\n    super( props );\n    this.state = {\n      breakTime : defaultBreakTime,\n      sessionTime : defaultSessionTime,\n      timerLabel : defaultTimerLabel,\n      status : stopped,\n      timeLeft : \"\",\n      break : false,\n    };\n    \n    this.handleIncrement = this.handleIncrement.bind( this );\n    this.handleDecrement = this.handleDecrement.bind( this );\n    this.handleStartStop = this.handleStartStop.bind( this );\n    this.tick = this.tick.bind( this );\n    this.handleReset = this.handleReset.bind( this )\n    this.alarm = this.alarm.bind( this );\n    this.rollover = this.rollover.bind( this );\n  };\n\n  UNSAFE_componentWillMount(){\n    if( this.state.status === \"stopped\" ){\n      this.setState( state => {\n        return {\n          timeLeft : String( timefy( this.state.sessionTime * 60 ))\n        }\n      })\n        //this.state.timeLeft = String( timefy( this.state.sessionTime * 60 ));\n      };\n  };\n  \n  alarm = () => {\n    let audio = document.getElementById(\"beep\")\n    audio.play()\n    setTimeout( () => {\n      audio.pause();\n      audio.currentTime = 0.0;\n    }, 2900)\n  };\n\n  rollover = () => {\n    if( !this.state.break ){\n        let newTime = parseInt( this.state.breakTime ) * 60;\n        let displayNewTime = timefy( newTime );\n        this.setState( state => {\n          return {\n            break : true,\n            timeLeft : displayNewTime,\n          }\n        });\n        this.tick( newTime );\n      }\n      else{\n        let newTime = parseInt( this.state.sessionTime ) * 60;\n        let displayNewTime = timefy( newTime );\n        this.setState( state => {\n          return {\n            break : false,\n            timeLeft : displayNewTime,\n          }\n        });\n        this.tick( newTime );\n      };\n  };\n  \n  tick = ( seconds ) => {\n  const now = Date.now();\n  const then = now + seconds * 1000;\n  \n  countdown = setInterval( () => {\n    secondsLeft = Math.round(( then - Date.now() ) / 1000 );\n    if( secondsLeft < 0 ){\n      clearInterval( countdown );\n      this.alarm();\n      setTimeout( this.rollover, 2900);\n    }\n    else{\n      let result = String( timefy( secondsLeft ));\n      document.title = result;\n      this.setState( state => {\n        return { \n          timeLeft : result,\n        }\n      });\n    };  \n  }, 1000);\n };\n  \n  handleStartStop(){\n    clearInterval( countdown )\n    if( this.state.status === stopped ){\n      this.setState( state => {\n        return {\n          status : running,\n        }\n      })\n      let seconds = parseInt( this.state.sessionTime ) * 60;\n      this.tick( seconds );\n    }\n    else if( this.state.status === running ){\n      this.setState( state => {\n        return { \n          status : paused,\n        }\n      })\n    }\n    else if( this.state.status === paused){\n      this.setState( state => {\n        return { \n          status : running,\n        }\n      })\n      let seconds = secondsLeft;\n      this.tick(seconds);\n    }\n  };\n  handleIncrement = e => {\n    const data = e.target.getAttribute( \"data-type\" );\n    if ( data === \"break\" ) {\n      let inputTime = parseInt(this.state.breakTime);\n      if( inputTime < 60 ){\n        let outputTime = String( inputTime + 1 );\n        this.setState( state => {\n          return {\n            breakTime: outputTime,\n          };\n        });\n      }\n    } else if ( data === \"session\" ) {\n      let inputTime = parseInt(this.state.sessionTime);\n      let outputTime = inputTime + 1;\n      if( inputTime < 60 ){\n        if(this.state.status === stopped){\n          this.setState(state => {\n          return {\n            sessionTime: outputTime,\n            timeLeft: String( timefy( outputTime * 60 ))\n          };\n        });\n        }\n        else{\n          this.setState(state => {\n          return {\n            sessionTime: outputTime,\n          };\n        });\n        }\n        \n        \n      }\n    }\n  };\n  handleDecrement = e => {\n    const data = e.target.getAttribute(\"data-type\");\n    if ( data === \"break\" ) {\n      let inputTime = parseInt( this.state.breakTime );\n      if( inputTime > 1 ){\n        let outputTime = String( inputTime - 1 );\n        this.setState(state => {\n          return {\n            breakTime: outputTime,\n          };\n        });\n      }\n    } else if ( data === \"session\" ) {\n      let inputTime = parseInt( this.state.sessionTime );\n      if( inputTime > 1 ){\n        let outputTime = String( inputTime - 1 );\n        if( this.state.status === stopped ){\n          this.setState(state => {\n          return {\n            sessionTime: outputTime,\n            timeLeft: String( timefy( outputTime * 60 ))\n          };\n        });\n        }else {\n          this.setState(state => {\n          return {\n            sessionTime: outputTime,\n          };\n        });\n        }\n        \n      }\n    }\n  };\n  handleReset = () => {\n    clearInterval(countdown);\n    this.setState( state => {\n      return {\n        sessionTime : defaultSessionTime,\n        breakTime : defaultBreakTime,\n        timerLabel : defaultTimerLabel,\n        status : stopped,\n        timeLeft : String( timefy( defaultSessionTime * 60 )),\n        break : false,\n      }\n    })\n  };\n\n  render() {\n    \n    return (\n      <div className=\"pomodoro\">\n        <div className=\"setupWrapper\">\n          <Break \n            handleIncrement={ this.handleIncrement }\n            handleDecrement={ this.handleDecrement }\n            breakLength={ this.state.breakTime }\n          />\n          <Session\n            handleIncrement={ this.handleIncrement }\n            handleDecrement={ this.handleDecrement }\n            sessionLength={ this.state.sessionTime }\n          />\n        </div>\n        <Timer \n          status={ this.state.break }\n          timeLeft={ this.state.timeLeft }\n        />\n        <Controls\n          handleStartStop={ this.handleStartStop }\n          handleReset={ this.handleReset }\n        />\n        <Audio />\n      </div>\n    );\n  }\n};\n\nconst Break = props => {\n  return (\n    <div className=\"adjust break\">\n      <h3 id=\"break-label\">Break</h3>\n      <div id=\"break-increment\" \n        className=\"hexagon\" \n        onClick={props.handleIncrement}>\n          <i \n            data-type=\"break\" \n            className=\"fa fa-arrow-up\" />\n      </div>\n      <div \n        className=\"setTimeDisplay hexagon\" \n        id=\"break-length\">{props.breakLength}\n      </div>\n      <div id=\"break-decrement\" \n        className=\"hexagon\" \n        onClick={props.handleDecrement}>\n        <i \n          data-type=\"break\" \n          className=\"fa fa-arrow-down\" \n        />\n      </div>\n      </div>\n  );\n};\n\nconst Session = ( props ) => {\n  return(\n    <div className=\"adjust session\">\n      <div id=\"session-increment\" className=\"hexagon\" onClick={props.handleIncrement}>\n        <i data-type=\"session\" className=\"fa fa-arrow-up\" />\n      </div>\n      <div className=\"setTimeDisplay hexagon\" id=\"session-length\">{props.sessionLength}</div>\n      <div id=\"session-decrement\" className=\"hexagon\" onClick={props.handleDecrement}>\n        <i data-type=\"session\" className=\"fa fa-arrow-down\" />\n      </div>\n        <h3 id=\"session-label\">Session</h3>\n      </div>\n    \n  )\n};\n\nconst Timer = (props) => {\n    return (\n      <div className=\"timer\">\n        <div id=\"timer-label\">{ props.status === true ? \"Break\" : \"Session\" }</div>\n        <div id=\"time-left\">{ props.timeLeft }</div>\n      </div>\n    )\n};\n\nconst Controls = ( props ) => {\n  return (\n    <div className=\"controls\">\n      <button\n        className=\"control-button\"\n        id=\"start_stop\" \n        onClick={ props.handleStartStop }>\n          <i className=\"fa fa-play\" aria-hidden=\"true\" sr-only=\"play\"></i>\n          <i className=\"fa fa-pause\" aria-hidden=\"true\" sr-only=\"pause\"></i>\n      </button>\n      <button \n        className=\"control-button\"\n        id=\"reset\"\n        onClick={ props.handleReset }>\n          <i className=\"fa fa-refresh\" aria-hidden=\"true\" sr-only=\"reset\"></i>\n      </button>\n    </div>\n  )\n};\n\nconst Audio = () => {\n  return (\n    <div>\n      <audio \n        id=\"beep\"\n        src=\"http://soundbible.com/mp3/analog-watch-alarm_daniel-simion.mp3\"/>\n    </div>\n  )\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}